scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type User {
    id: ID!
    name: String!
    email: String!
    password_reset_token: String
    auth_key: String
    email_verified_at: DateTime
    phone_number: String
    password: String!
    remember_token: String
    token_device: String
    created_at: DateTime
    updated_at: DateTime
}

type Query {
    users: [User!]! @all(model: "App\\Models\\User")
    user(id: ID!): User
        @field(resolver: "App\\GraphQL\\Resolvers\\UserResolver@findUser")
}

type Mutation {
    createUser(
        name: String
        email: String!
        password_reset_token: String!
        auth_key: String!
        phone_number: String
        password: String!
        token_device: String
    ): User @create(model: "App\\Models\\User")

    updateUser(
        id: ID!
        name: String
        email: String
        password_reset_token: String
        auth_key: String
        phone_number: String
        password: String
        token_device: String
    ): User @update(model: "App\\Models\\User")

    deleteUser(id: ID!): Boolean
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@deleteUser")

    # Register a new user
    register(
        name: String!
        email: String!
        password: String!
        password_confirmation: String!
    ): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@register")
    login(
        email: String!
        password: String!
        token_device: String!
    ): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@login")
    logout: Boolean
        @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@logout")
    refreshToken: AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@refreshToken")

    forgotPassword(email: String!): AuthCode
        @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@forgotPassword")
    resetPassword(email: String!, code: String!): AuthCode
        @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@resetPassword")
    updatePassword(
        email: String!
        code: String!
        password: String!
        password_confirmation: String!
    ): AuthCode
        @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@updatePassword")
}

type AuthPayload {
    user: User!
    auth_key: String!
}

type AuthCode {
    code: Int
    success: Boolean!
    message: String
    reset_token: String
}
